<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:util="http://www.springframework.org/schema/util"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">
    <!-- 扫描通过注解(@Repository)生成的Bean -->
    <context:component-scan base-package="com.qiu.*"/>

    <import resource="applicationContext-dao.xml"/>
    <import resource="applicationContext-redis.xml"/>

<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <property name="securityManager" ref="securityManager"/>
        <!-- 没有登录的用户请求需要登录的页面时自动跳转到登录页面，不是必须的属性，不输入地址的话会自动寻找项目web项目的根目录下的”/login.jsp”页面 -->
        <property name="loginUrl" value="login.html"/>
        <!-- 没有权限默认跳转的页面 -->
        <property name="unauthorizedUrl" value="403.html"/>
        <property name="filterChainDefinitions">
            <!-- 自上到下 -->
            <!-- anon:表示可以匿名使用。 authc:表示需要认证(登录)才能使用，没有参数.  roles["admin,guest"],每个参数通过才算通过，user表示必须存在用户 -->
            <value>
                /login.html = anon
                /subLogin = anon
                /testRoles = roles["admin","admin1"]//这个必须都满足admin和admin1才行
                /testRoles1 = rolesOr["admin","admin1"]//这个满足admin或者admin1就行
                <!--/testRoles = roles["admin"]-->
                <!--/testRoles1 = roles["admin","admin1"]-->
                <!--/testPerms = perms["user:delete"]-->
                <!--/testPerms1 = perms["user:delete","user:updata"]-->
                /* = authc
            </value>
        </property>
        <property name="filters">
            <util:map>
                <entry key="rolesOr" value-ref="rolesOrFilter"/>
            </util:map>
        </property>
    </bean>
    <!-- 自定义权限filter -->
    <bean id="rolesOrFilter" class="com.qiu.filter.RolesOrFilter" />

    <!--创建securityManager对象-->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <property name="realm" ref="realm"/>
        <property name="sessionManager" ref="sessionManager"/>
        <property name="cacheManager" ref="cacheManager"/>
        <property name="rememberMeManager" ref="cookieRememberMeManager"/>
    </bean>
    <!-- 自定义Realm -->
    <bean id="realm" class="com.qiu.shiro.realm.CustomerRealm">
        <property name="credentialsMatcher" ref="credentialsMatcher"/>
    </bean>
    <bean id="credentialsMatcher" class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
        <property name="hashAlgorithmName" value="md5"/>
        <property name="hashIterations" value="1"/>
    </bean>
    <!-- 自定义SessionManager -->
    <bean id="sessionManager" class="com.qiu.session.CustomerSessionManager">
        <property name="sessionDAO" ref="redisSessionDao"/>
    </bean>
    <bean class="com.qiu.session.RedisSessionDao" id="redisSessionDao"/>
    <bean class="com.qiu.cache.RedisCacheManager" id="cacheManager"/>
    <!--rememberme-->
    <bean id="cookieRememberMeManager" class="org.apache.shiro.web.mgt.CookieRememberMeManager">
        <property name="cookie" ref="cookie"/>
    </bean>
    <bean id="cookie" class="org.apache.shiro.web.servlet.SimpleCookie">
        <constructor-arg value="rememberMe"/>
        <property name="maxAge" value="200000"/><!--cookie存活时间-->
    </bean>

</beans>